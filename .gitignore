
#Testing the code
# u1 = User('John', '001')
# u2 = User('Jane', '002')
# t = Transactions()
# t.add_transaction(u1, 50)
# t.add_transaction(u2, 75.50)
# print(t.get_all_transactions())
'''
# Testing the code
u1 = User('John Doe', '001')
u2 = User('Jane Smith','002')
t = Transactions()
c = Categories()

print(u1.get_name()) # John Doe
print(u2.get_name()) # Jane Smith

t.add_transaction(u1, 50.50, datetime.now(), "Gas", "Food")
t.add_transaction(u1, -30,'2021-04-06', "Coffee", "Entertainment")
t.show_transactions(u1)

c.add_category("Food")
c.add_category("Transportation")
c.show_categories()

print(t.total_transactions_for_user(u1)) #  80.0
print(t.total_transactions_for_user(u2)) #  0.0

# Testing the class
u1 = User("John",567894321)
print(u1.display_user_info())
u1.name="Alice"
print(u1.display_user_info())
try:
   u1.name=123
except Exception as e:
   print(e)

u2 = User("Bob","bobID")
print(u2.display_user_info())
try:
   u2.ID=9527
except Exception as e:
   print(e)
'''

import datetime

class User:
    def  __init__(self, name, ID):
        self._name  = name
        self._ID = ID
        
    @property
    def name(self, value):
        return self._name
    @name.setter
    def name(self, value):
        if isinstance(value, str) and len(value)>0:
            self._name=value
        else:
            raise ValueError("Name must be a non-empty string")
        
    @property
    def ID(self):
        return self._ID
    
    def ID(self, value):
        if  isinstance(value, int) and value >0 :
            self._ID = value
        else:
            raise ValueError('User ID must be a positive integer')
        
    def __str__(self):
        print(f"Name: {self._name}, ID:{self._ID}")
    pass

class Transactions:
    def  __init__(self):
        self.transactions_dict={}
    
    def add_transaction(self, user, amount, date, description, category):
        if isinstance(user,User) and isinstance(amount, (int, float)):
            transaction_id = len(self.transactions_dict) + 1
            self.transactions_dict[transaction_id] = {
                "user": user._name ,
                "Amount": amount , 
                "Date": date , 
                "Description": description ,  
                "Categoty": category}
        else:
            print("Invalid input")
            
    def get_all_transactions(self):
        return self.transactions_dict
       
    def total_transactions_for_user(self, user):
        user_transactions = [transaction["Amount"] for transaction in self.transactions_dict.values if transaction["user"] == user._name]
        return sum(user_transactions)
    pass


class Categories:
    def  __init__(self):
        self.categories=[]
        
    def add_category(self, category):
        self.categories.append(category)
        
    def remove_category(self, category):
        try:
            self.categories.remove(category)    
        except ValueError as e: 
            print(f"Category {category} does not exist.")    
            
    def show_categories(self):
        return self.categories

    pass







