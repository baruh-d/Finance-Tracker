from models import User, Transactions, Category, Session
import random
from faker import Faker
from datetime import timedelta, datetime

fake = Faker()
# initialize the seed value to ensure random data generated by Faker remains consistent across multiple runs
#by initializing to zero . This will generate a new set of "random" values each time you run the script. 
fake.seed(0)
def generate_data(n_users, n_categories, num_transactions):
    """Populate the database with fake data."""
    #calculating based of of start and end dates for random generated dates
    start_date = '2017-01-01' #any date
    end_date = datetime.now() #current time as end date
    
    db_session = Session()
    #generating user data
    users = {User(name=fake.name(), email=fake.email()) for _ in range(n_users)}
    #add all users
    db_session.bulk_save_objects(users)
    #commit changes to db
    db_session.commit()
    
     #generating categories
    categories = {Category(label=fake.word()) for _ in range(n_categories)}
    while len(categories) < n_categories:
        categories.add(Category(label=fake.word()))
    db_session.bulk_save_objects(categories)
    #commit changes
    db_session.commit()
    
    #extracting category IDs
    category_ids = {category.id for category in categories}
    
    #generating transaction data using associated classes/methods 
    transactions = []
    for user in users:
        num_transactions = random.randint(5, 20)
        for _ in range(num_transactions):
            amount = fake.random(min=1, max=999999) #amount range to rep ksh
            transaction_type = random.choice(['debit', 'credit'])
            category_id = random.choice(category_ids)
            #generating random date within the specified range
            random_date = start_date + timedelta(days=random.randint(0, (end_date - start_date).days))
            transaction = Transactions(
                user_id=user.id, 
                category_id=category_id,
                description=fake.sentence(), 
                amount=amount,
                transaction_type=transaction_type,
                date=random_date)
            transactions.append(transaction)
            
    db_session.bulk_save_objects(transactions)
    db_session.commit()
    db_session.close()

def populate(n_users=15, n_categories=7, num_transactions=100):
    generate_data(n_users, n_categories, num_transactions)
    
if __name__ == "__main__":
    populate()    